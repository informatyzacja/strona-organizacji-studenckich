// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Role {
    ADMIN
    OWNER
    USER
}

model Tag {
    id            String         @id @default(cuid())
    text          String         @unique
    organizations Organization[]
}

model ContactMethods {
    id             String       @id @default(cuid())
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    contactType    String
    contactLink    String
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Organization {
    id                     String           @id @default(cuid())
    name                   String
    createdAt              DateTime         @default(now())
    updatedAt              DateTime         @updatedAt
    department             String?
    fieldOfStudy           String           @db.Text
    description            String
    logoUrl                String?
    type                   String
    slug                   String           @unique
    longDescription        String?          @db.Text
    skillsAndChallenges    String?          @db.Text
    achievements           String?          @db.Text
    distinguishingFeatures String?          @db.Text
    areasOfInterest        String?          @db.Text
    foundationDate         DateTime?
    ownerId                String           @unique
    owner                  User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ContactMethods         ContactMethods[]
    Tags                   Tag[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    role          Role          @default(USER)
    name          String?
    email         String        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    organization  Organization?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
