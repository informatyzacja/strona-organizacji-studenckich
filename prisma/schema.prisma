// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Role {
    ADMIN
    OWNER
    USER
}

model ContactMethods {
    id              String       @id @default(cuid())
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt
    contact_type    String
    contact_link    String
    organization_id String
    organization    Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
}

model Projects {
    id              String       @id @default(cuid())
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt
    name            String
    description     String
    organization_id String
    organization    Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
}

model Managers {
    id              String       @id @default(cuid())
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt
    name            String
    organization_id String
    email_address   String
    organization    Organization @relation(fields: [organization_id], references: [id])
}

model Organization {
    id               String           @id @default(cuid())
    name             String
    createdAt        DateTime         @default(now())
    updatedAt        DateTime         @updatedAt
    residence        String
    description      String
    long_description String           @db.Text
    number_of_users  Int
    foundation_date  DateTime
    owner_id         String           @unique
    owner            User             @relation(fields: [owner_id], references: [id], onDelete: Cascade)
    ContactMethods   ContactMethods[]
    Projects         Projects[]
    Managers         Managers[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    role          Role          @default(USER)
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    organization  Organization?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
